name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
    # - cron: 0 0 * * 5
  # watch:
    # types: started
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: KamiWrt.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_PACKAGES: false
  UPLOAD_RELEASE: true
  UPLOAD_ARTIFACTS: false
  TELEGRAM_NOTIFICATION: true
  DELETE_OLD_REALEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Get Current Time
      id: date
      run: |
        echo "START_SECOND=$(date +"%s")" >> $GITHUB_ENV
    
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "$TZ"
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge azure* dotnet* firefox ghc* google* hhvm llvm* mono* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get update -y
        sudo -E apt-get install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3.8 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev
        pip install aligo
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h

    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default

        cd openwrt
        cp -f ../$DIY_P1_SH ./
        chmod +x ./$DIY_P1_SH && ./$DIY_P1_SH

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

        ./scripts/feeds install -a

        cp -f ../$DIY_P2_SH ./        
        chmod +x ./$DIY_P2_SH && ./$DIY_P2_SH

    - name: Configuration Customization
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        cd openwrt && make defconfig

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile firmware
      id: compile
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status="success"" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: OpenWrt_bin_${{ env.DEVICE_NAME }}_${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      working-directory: ./openwrt
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        rm -rf ./firmware
        mkdir -p ./firmware
        ls ./bin/targets/*/*/
        ls ./bin/targets/*/*/*
        rom=./bin/targets/x86/64/openwrt-x86-64-generic-squashfs-combined.img.gz
        config=./.config
        cp -a $rom ./firmware/KamiWrt-${{ env.FILE_DATE }}.img.gz
        cp -a $config ./firmware/${{ env.FILE_DATE }}.config
        cd ./firmware
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Pack packages folder
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_PACKAGES == 'true' && !cancelled()
      run: |
        cd openwrt/bin/packages/
        tar -cvf KamiWrt_Packages_${{ env.FILE_DATE }}.tar ./
        gzip KamiWrt_Packages_${{ env.FILE_DATE }}.tar
        mv *.tar.gz ..

    - name: Upload firmware to artifact
      uses: actions/upload-artifact@main
      if: env.UPLOAD_ARTIFACTS == 'true' && !cancelled()
      with:
        name: KamiWrt_firmware_${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
    
    - name: Upload packages to artifact
      uses: actions/upload-artifact@main
      if: env.UPLOAD_PACKAGES == 'true' && env.UPLOAD_ARTIFACTS == 'true' && !cancelled()
      with:
        name: KamiWrt_Packages_${{ env.FILE_DATE }}
        path: openwrt/bin/packages

    - name: Generate Tag & Release Name
      id: release
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        release_name="KamiWrt-${{ env.FILE_DATE }}"
        release_tag="${{ env.FILE_DATE }}"
        echo "release_name=$release_name" >> $GITHUB_OUTPUT
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT  

    - name: Upload firmware to release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        artifacts: ${{ env.FIRMWARE }}/*
        name: ${{ steps.release.outputs.release_name }}
        tag: ${{ steps.release.outputs.release_tag }}
        token: ${{ secrets.KAMI_TOKEN }}
    
    - name: Upload packages to release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && env.UPLOAD_PACKAGES == 'true' && !cancelled()
      with:
        artifacts: openwrt/bin/KamiWrt_Packages_${{ env.FILE_DATE }}.tar.gz
        name: KamiWrt_Packages_${{ env.FILE_DATE }}
        tag: ${{ steps.release.outputs.release_tag }}
        token: ${{ secrets.KAMI_TOKEN }}

    - name: Delete workflow runs
      if: (!cancelled())
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 11

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 10
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.KAMI_TOKEN }}
    
    - name: Get compile time
      if: (!cancelled())
      id: length
      run: |
        timeLength=$[$(date +"%s")-${{env.START_SECOND}}]
        timeHour=$[$timeLength/3600]
        timeMin=$[($timeLength-$timeHour*3600)/60]
        echo "TIME_HOUR=$timeHour" >> $GITHUB_ENV
        echo "TIME_MIN=$timeMin" >> $GITHUB_ENV

    - name: Telegram notification
      if: steps.compile.outputs.status == 'success' && env.TELEGRAM_NOTIFICATION == 'true' && !cancelled() 
      run: |
        curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=<b>✅ KamiWrt改コンパイル完了！</b>
        時間：${{env.TIME_HOUR}}時${{env.TIME_MIN}}分&parse_mode=HTML"

    - name: Telegram notification when fail
      if: steps.compile.outputs.status != 'success' && env.TELEGRAM_NOTIFICATION == 'true' && !cancelled()
      run: |
        curl -s "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=<b>❌ KamiWrt改コンパイルに失敗！</b>&parse_mode=HTML"
